version: '3.8'

services:
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.7.1
    container_name: mlflow_server
    ports:
      - "5001:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow.db
      - MLFLOW_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - ./mlflow:/mlflow
    command: >
      mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri sqlite:///mlflow.db --default-artifact-root /mlflow/artifacts
    restart: always

  trainteacher:
    build: .
    container_name: train_teacher
    shm_size: 4gb
    depends_on:
      - mlflow
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./models:/app/models
      - ./dataset:/app/dataset
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    entrypoint: ["python3", "train_teacher.py"]
    command:
      - "--data_dir=${data_dir:-dataset/fruits-360}"
      - "--batch_size=${batch_size:-16}"
      - "--epochs=${epochs:-1}"
      - "--lr=${lr:-0.02}"
      - "--momentum=${momentum:-0.9}"
      - "--feature_extract=${feature_extract:-True}"

  trainstudent:
    build: .
    container_name: train_student
    shm_size: 4gb
    depends_on:
      - mlflow
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./models:/app/models
      - ./dataset:/app/dataset
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    entrypoint: ["python3", "train_student.py"]
    command:
      - "--data_dir=${data_dir:-dataset/fruits-360}"
      - "--batch_size=${batch_size:-16}"
      - "--epochs=${epochs:-1}"
      - "--lr=${lr:-0.001}"
      - "--prune_rate=${prune_rate:-0.9}"
      - "--prune_method=${prune_method:-l1_unstructured}"
      - "--alpha=${alpha:-0.5}"
      - "--temperature=${temperature:-2.0}"
 
  backend:
    build: ./backend
    container_name: backend
    shm_size: 1gb
    volumes:
      - ./models:/app/models
      - ./dataset:/app/dataset
      - ./trainings:/app/trainings
    ports:
      - "5050:5050"
    command: ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "5050"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5050"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  frontend:
    image: nginx
    container_name: frontend
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
    ports:
      - "8080:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
